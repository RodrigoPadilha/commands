Usando o mesmo conceito de "interno", métodos e variáveis internas de uma classe que não devem ser acessados de fora dela, também devem começar com um underscore. 
Mas isso não os torna privados. Nesse caso, é apenas uma convenção mesmo.
_*


Variáveis ou métodos privados não podem ser acessados de fora da classe 
Quando variáveis ou métodos com nomes assim são definidos dentro de uma classe, eles são modificados e têm o nome da classe inserido no início
se você quer criar uma classe e ela tem a possibilidade de ser extendida, não crie métodos nem variáveis iniciados com dois underscores. 
A não ser que você tenha certeza que eles nunca serão usados nas classes filhas.
__*

###########################################################
    herança, polimorfismo, duck typing e herança múltipla.
###########################################################


Herança
    Programa:
        def __init__(self):

        Filme(Programa):
            def __init__(self):
                super().__init__(nome, ano)
                self.temporadas = temporadas


        Serie(Programa):
            def __init__(self):
                super().__init__(nome, ano)
                self.temporadas = temporadas

Métodos de classe
    métodos declarados com @classmethod

Métodos estáticos
    outra forma de criar métodos ligados à classe é com a declaração @staticmethod



Interface
    Obrigar a classe a implementar métodos
    
Métodos Abstratos
    - Todas as classes filhas que não implementarem os métodos abstratos geram um erro ao serem instanciados

        #EXEMPLO:
        from abc import ABCMeta, abstractmethod
            ########### Pai ##########
            class MinhaClasse(metaclass=ABCMeta):      # Isso torna a classe MInhaClasse ABSTRATA
                def __init__(self, codigo):
                    self._codigo = 0
                
                @abstractmethod
                def metodo_que_vai_ser_usado_nas_filhas(self):
                    pass
            
            ########### Filho A ##########
            class MinhaClasseFilha(MinhaClasse):
                def __init__(self):
                    blabla = "blabla"

                def metodo_que_vai_ser_usado_nas_filhas(self):
                    pass
            
            ########### Filho B ##########
            class MinhaOutraClasseFilha(MinhaClasse):
                def __init__(self):
                    blabla = "blabla"
                                    
                # def metodo_que_vai_ser_usado_nas_filhas(self):    # Vai gerar erro quando instanciado um objeto dessa classe
                #     pass

                


                
                


Mixim
    classes pequenas, cujos objetos nem precisam ser instanciados, de Mixins. 
    Elas são bastante utilizadas em Python no caso de precisarmos compartilhar algum comportamento que não é o mais importante desta classe.




Array Python
    - Aceita apenas valores numéricos
    - Para ser instanciado precisa de um tipo, ou seja, não aceita valores de vários tipos após ser criado
        import array as arr
        arr.array('d', [1, 3.5]) # Tipo (double), Valores 
    - Tenta armazenar forma amis eficiente e otimizar o processamento em cima dos valores de forma amis eficientes.

Usando o mesmo conceito de "interno", métodos e variáveis internas de uma classe que não devem ser acessados de fora dela, também devem começar com um underscore. 
Mas isso não os torna privados. Nesse caso, é apenas uma convenção mesmo.
_*


Variáveis ou métodos privados não podem ser acessados de fora da classe 
Quando variáveis ou métodos com nomes assim são definidos dentro de uma classe, eles são modificados e têm o nome da classe inserido no início
se você quer criar uma classe e ela tem a possibilidade de ser extendida, não crie métodos nem variáveis iniciados com dois underscores. 
A não ser que você tenha certeza que eles nunca serão usados nas classes filhas.
__*

###########################################################
    herança, polimorfismo, duck typing e herança múltipla.
###########################################################


Herança
    Programa:
        def __init__(self):

        Filme(Programa):
            def __init__(self):
                super().__init__(nome, ano)
                self.temporadas = temporadas


        Serie(Programa):
            def __init__(self):
                super().__init__(nome, ano)
                self.temporadas = temporadas

Métodos de classe
    métodos declarados com @classmethod

Métodos estáticos
    outra forma de criar métodos ligados à classe é com a declaração @staticmethod



Interface
    Obrigar a classe a implementar métodos
    
Métodos Abstratos
    - Todas as classes filhas que não implementarem os métodos abstratos geram um erro ao serem instanciados

        #EXEMPLO:
        from abc import ABCMeta, abstractmethod
            ########### Pai ##########
            class MinhaClasse(metaclass=ABCMeta):      # Isso torna a classe MInhaClasse ABSTRATA
                def __init__(self, codigo):
                    self._codigo = 0
                
                @abstractmethod
                def metodo_que_vai_ser_usado_nas_filhas(self):
                    pass
            
            ########### Filho A ##########
            class MinhaClasseFilha(MinhaClasse):
                def __init__(self):
                    blabla = "blabla"

                def metodo_que_vai_ser_usado_nas_filhas(self):
                    pass
            
            ########### Filho B ##########
            class MinhaOutraClasseFilha(MinhaClasse):
                def __init__(self):
                    blabla = "blabla"
                                    
                # def metodo_que_vai_ser_usado_nas_filhas(self):    # Vai gerar erro quando instanciado um objeto dessa classe
                #     pass

                


                
                


Mixim
    classes pequenas, cujos objetos nem precisam ser instanciados, de Mixins. 
    Elas são bastante utilizadas em Python no caso de precisarmos compartilhar algum comportamento que não é o mais importante desta classe.




Array Python
    - Aceita apenas valores numéricos
    - Para ser instanciado precisa de um tipo, ou seja, não aceita valores de vários tipos após ser criado
        import array as arr
        arr.array('d', [1, 3.5]) # Tipo (double), Valores 
    - Tenta armazenar forma amis eficiente e otimizar o processamento em cima dos valores de forma amis eficientes.

###########################################################
    COLLECTIONS PYTHON - Lista e Tuplas
###########################################################
    - Como usar listas de Objetos e tipos primitivos
    - Comparações entre itens(objetos)
    - Array do python (raramente utilizado)
    - Ordenações de listas implementadno métodos BuildIns

# O que são enumerated: interável que devolve um número e o elemento (num , elem)
    idades = [15, 87, 32, 65, 56, 32, 49, 37]
    for i in range(len(idades)):
    print(i, idades[i])
    range(len(idades)) # lazy...
    enumerate(idades) # lazy
    list(range(len(idades))) # forcei a geração dos valores
    list(enumerate(idades))

# Desempacotar tuplas;
    for indice, idade in enumerate(idades): # unpacking da nossa tupla
    print(indice, "x", idade)

    usuarios = [
        ("Guilherme", 37, 1981),
        ("Daniela", 31, 1987),
        ("Paulo", 39, 1979)
    ]

    for nome, idade, nascimento in usuarios: # ja desempacotando
    print(nome)

    for nome, _, _ in usuarios: # ja desempacotando, ignorando o resto
    print(nome)

# Ordenação de objetos
    conta_do_guilherme = ContaSalario(17)
    conta_do_guilherme.deposita(500)

    conta_da_daniela = ContaSalario(3)
    conta_da_daniela.deposita(1000)

    conta_do_paulo = ContaSalario(133)
    conta_do_paulo.deposita(510)

    contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

    for conta in contas:
        print(conta)

    sorted(contas)

    conta_do_guilherme < conta_da_daniela

    # Passa método por parametro
    def extrai_saldo(conta):
        return conta._saldo

    for conta in sorted(contas, key=extrai_saldo):
        print(conta)


    # Compara com base em um atributo do objeto
    from operator import attrgetter

    for conta in sorted(contas, key=attrgetter("_saldo")):
        print(conta)


# Ordenação com Total Ordering
    from functools import total_ordering

    @total_ordering
    class ContaSalario:
    
    def __init__(self, codigo):
        self._codigo = codigo
        self._saldo = 0
        
    def __eq__(self, outro):
        if type(outro) != ContaSalario:
        return False
        
        return self._codigo == outro._codigo and self._saldo == outro._saldo
    
    def __lt__(self, outro):
        if self._saldo != outro._saldo:
        return self._saldo < outro._saldo
        
        return self._codigo < outro._codigo
    
    def deposita(self, valor):
        self._saldo += valor
        
    def __str__(self):
        return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)

    conta_do_guilherme = ContaSalario(1700)
    conta_do_guilherme.deposita(500)

    conta_da_daniela = ContaSalario(3)
    conta_da_daniela.deposita(1000)

    conta_do_paulo = ContaSalario(133)
    conta_do_paulo.deposita(500)

    contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

    conta_do_guilherme <= conta_da_daniela
    conta_do_guilherme <= conta_do_paulo
    conta_do_guilherme < conta_do_guilherme
    conta_do_guilherme == conta_do_guilherme
    conta_do_guilherme <= conta_do_guilherme
